<!DOCTYPE html>
<html>
  <head>
    <!-- borrowed from https://github.com/ClassiCube/ClassiCube/blob/master/doc/hosting-flask.md -->
    <meta name="viewport" content="width=device-width" />
    <style>
      body {
        margin: 0;
        background: white;
      }

      .row {
        margin-left: auto;
        margin-right: auto;
        max-width: 62.5em;
      }

      .sec {
        background: black;
        padding: 0;
      }

      #logmsg {
        border-radius: 2px;
        background: black;
        color: red;
        padding: 4px;
      }

      #logmsg:empty {
        display: none;
      }

      .maincontent {
        width: 100vw;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
      }

      .maincontent form {
        padding: 3em;
        border-radius: 8px;
        border: 1px solid black;
        background: white;
      }
    </style>
  </head>
  <body>
    <div class="maincontent">
      {{ if .ShowCanvas }}
      <canvas
        id="game_canvas"
        style="
          display: block;
          box-sizing: border-box;
          border-width: 0px;
          padding: 0;
          margin: 0 auto;
          background-color: black;
        "
        oncontextmenu="event.preventDefault()"
        tabindex="-1"
        width="800"
        height="600"
      ></canvas>
      <div id="logmsg"></div>
      <script type="text/javascript">
        function resizeGameCanvas() {
          var cc_canv = document.getElementById("game_canvas");
          const dpi = 1.0; // window.devicePixelRatio;
          const aspect_ratio = 16 / 9;

          const viewport_w = document.documentElement.clientWidth * 0.99;
          const viewport_h = Math.min(
            viewport_w / aspect_ratio,
            document.documentElement.clientHeight * 0.99
          );

          let canv_w = Math.round(viewport_w);
          let canv_h = Math.round(viewport_h);

          if (canv_h % 2) {
            canv_h = canv_h - 1;
          }
          if (canv_w % 2) {
            canv_w = canv_w - 1;
          }

          /* Mobile mode
          const screen_h = Math.min(
            window.innerHeight,
            window.outerHeight || window.innerHeight
          );
          canv_h = screen_h;
          */

          cc_canv.width = canv_w * dpi;
          cc_canv.height = canv_h * dpi;
        }

        const connection_string = JSON.parse(
          `{{ .ConnectionString }}`.replace(/^["]/, "").replace(/["]$/, "")
        );

        var Module = {
          preRun: [resizeGameCanvas],
          postRun: [],
          arguments: connection_string,
          print: function (text) {
            if (arguments.length > 1)
              text = Array.prototype.slice.call(arguments).join(" ");
            console.log(text);
          },
          printErr: function (text) {
            if (arguments.length > 1)
              text = Array.prototype.slice.call(arguments).join(" ");
            console.error(text);
          },
          canvas: (function () {
            return document.getElementById("game_canvas");
          })(),
          setStatus: function (text) {
            console.log(text);
            document.getElementById("logmsg").innerText = text;
          },
          totalDependencies: 0,
          monitorRunDependencies: function (left) {
            this.totalDependencies = Math.max(this.totalDependencies, left);
            Module.setStatus(
              left
                ? "Preparing... (" +
                    (this.totalDependencies - left) +
                    "/" +
                    this.totalDependencies +
                    ")"
                : "All downloads complete."
            );
          },
        };
        Module.setStatus("Downloading...");
        window.onerror = function (msg) {
          Module.setStatus(`Exception thrown, see JavaScript console (${msg})`);
          Module.setStatus = function (text) {
            if (text) Module.printErr(`[post-exception status] ${text}`);
          };
        };

        window.addEventListener("resize", resizeGameCanvas);
      </script>
      <script async type="text/javascript" src="/static/ClassiCube.js"></script>
      {{ else }}
      <form action="/" method="post">
        Username: <input type="text" name="username" /><button type="submit">
          Go
        </button>
      </form>
      {{ end }}
    </div>
  </body>
</html>
